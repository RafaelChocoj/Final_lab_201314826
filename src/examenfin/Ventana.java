/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examenfin;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author RAFAEL
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    JFileChooser dialog = new JFileChooser();
    NodeAlum vector_arbol[];
    String jason_tree;
    String jason_solo_arbol;
    public Ventana() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_import = new javax.swing.JButton();
        b_cargar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b_import.setText("Importar Archivo");
        b_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_importActionPerformed(evt);
            }
        });

        b_cargar.setText("Cargar Arbol");
        b_cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(197, Short.MAX_VALUE)
                .addComponent(b_import, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(b_cargar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(b_cargar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addComponent(b_import, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_importActionPerformed
        // TODO add your handling code here:
        
        File archivo;
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo CSV", "csv");
        dialog.setFileFilter(filter); 
        if(dialog.showDialog(null, "Abrir docuemnto")== JFileChooser.APPROVE_OPTION)
        {
//            boolean ya = false;
            archivo = dialog.getSelectedFile();
            if(archivo.canRead() )
            {
                if(archivo.getName().endsWith("csv")  )
                {
                    JOptionPane.showMessageDialog(null,  "Importando archivo en ruta: " +archivo );
                    Read_Csv(archivo.toString());
                    JOptionPane.showMessageDialog(null, "Archivo Importado", "CSV", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "No puede abrir archivo");
            }
            
        }
    }//GEN-LAST:event_b_importActionPerformed

    public void leyendo_vec(int i){
        if ( vector_arbol[i] != null) {
            System.out.println("*******("+ i +") nod: "+ vector_arbol[i].nombre +"*****" );
            
//                    ////para el padre
//                    jason_solo_arbol += "  text: { \n";
//                    jason_solo_arbol += "    name: \"" + vector_arbol[i].nombre + "\", \n";
//                    jason_solo_arbol += "    title: \"" + vector_arbol[i].carne + "\", \n";
//                    jason_solo_arbol += "},\n";
//                    jason_solo_arbol += "collapsed: true,\n";

            int izquierda = 2*i + 1;
            int derecha = 2*i +2;
//            if(vector_arbol[izquierda] != null){
//                System.out.println("    <-" );
//                System.out.println(""+ vector_arbol[izquierda].nombre  );
//            }
//            if(vector_arbol[derecha] != null){
//                System.out.println("->");
//                System.out.println("    "+ vector_arbol[derecha].nombre  );
//            }
//            System.out.println("    <-" );
            leyendo_vec(izquierda);
//            System.out.println("->");
            leyendo_vec(derecha);
        }
       
//        for (int i = 0; i < vector_arbol.length ;i++) {
//                if (vector_arbol[i] != null){
//                    izquierda = 2*i + 1;
//                    derecha = 2*i +2;
//                    
//                    ////para el padre
//                    jason_solo_arbol += "  text: { \n";
//                    jason_solo_arbol += "    name: \"" + vector_arbol[i].nombre + "\", \n";
//                    jason_solo_arbol += "    title: \"" + vector_arbol[i].carne + "\", \n";
//                    jason_solo_arbol += "},\n";
//                    jason_solo_arbol += "collapsed: true,\n";
//                    
//                    ////para los hijos
//                    jason_solo_arbol += "children: [\n";
//                   
//                    /*para hijo izquierdo*/
//                if (vector_arbol[izquierda] != null){
//                    jason_solo_arbol += "    {\n";
//                    jason_solo_arbol += "        text:{\n";
//                    jason_solo_arbol += "            name: \"" + vector_arbol[izquierda].nombre + "\",\n";
//                    jason_solo_arbol += "            title: \"" + vector_arbol[izquierda].carne + "\"\n";
//                    jason_solo_arbol += "       }\n";
//                    jason_solo_arbol += "   },\n";
//                }
//                    
//                    /*para hijo derecho*/
//                if (vector_arbol[derecha] != null){
//                    jason_solo_arbol += "    {\n";
//                    jason_solo_arbol += "        text:{\n";
//                    jason_solo_arbol += "            name: \"" + vector_arbol[derecha].nombre + "\",\n";
//                    jason_solo_arbol += "            title: \"" + vector_arbol[derecha].carne + "\"\n";
//                    jason_solo_arbol += "       }\n";
//                    jason_solo_arbol += "   }\n";
//                }
//                    
//                    ///fin de hijo
//                    jason_solo_arbol += "    ]\n";
//                    
//                    System.out.println("("+ i +") izq: "+ izquierda + ", der: " + derecha  );
//                    
//                    //System.out.println("("+ i +") "+ vector_arbol[i].carne);
//                    //System.out.println("("+ i +") "+ vector_arbol[i].nombre);
//                }  
//            }
//            
//            
//            jason_solo_arbol += "        } \n";
//            
//            jason_tree += jason_solo_arbol;
//            jason_tree += "};";  ///finaliza la creacion
//            
//            JOptionPane.showMessageDialog(this, jason_tree  );
//            graf_arbol(jason_tree);
    }
    private void b_cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cargarActionPerformed
        // TODO add your handling code here:
        int derecha;
        int izquierda;
        jason_solo_arbol = "";
        jason_solo_arbol += "nodeStructure: {  \n";
        
        if (vector_arbol == null) {
            JOptionPane.showMessageDialog(this,  "No tiene datos ingresados"  );
        }else
        {
            for (int i = 0; i < vector_arbol.length ;i++) {
                
            }
//            creando_Arbol();
//            leyendo_vec(0);
//            
////            for (int i = 0; i < vector_arbol.length ;i++) {
////            //for (int i = 0; i < 1 ;i++) {
////                if (vector_arbol[i] != null){
////                    izquierda = 2*i + 1;
////                    derecha = 2*i +2;
////                    
////                    ////para el padre
////                    jason_solo_arbol += "  text: { \n";
////                    jason_solo_arbol += "    name: \"" + vector_arbol[i].nombre + "\", \n";
////                    jason_solo_arbol += "    title: \"" + vector_arbol[i].carne + "\", \n";
////                    jason_solo_arbol += "},\n";
////                    jason_solo_arbol += "collapsed: true,\n";
////                    
////                    ////para los hijos
////                    jason_solo_arbol += "children: [\n";
////                   
////                    /*para hijo izquierdo*/
////                if (vector_arbol[izquierda] != null){
////                    jason_solo_arbol += "    {\n";
////                    jason_solo_arbol += "        text:{\n";
////                    jason_solo_arbol += "            name: \"" + vector_arbol[izquierda].nombre + "\",\n";
////                    jason_solo_arbol += "            title: \"" + vector_arbol[izquierda].carne + "\"\n";
////                    jason_solo_arbol += "       }\n";
////                    jason_solo_arbol += "   },\n";
////                }
////                    
////                    /*para hijo derecho*/
////                if (vector_arbol[derecha] != null){
////                    jason_solo_arbol += "    {\n";
////                    jason_solo_arbol += "        text:{\n";
////                    jason_solo_arbol += "            name: \"" + vector_arbol[derecha].nombre + "\",\n";
////                    jason_solo_arbol += "            title: \"" + vector_arbol[derecha].carne + "\"\n";
////                    jason_solo_arbol += "       }\n";
////                    jason_solo_arbol += "   }\n";
////                }
////                    
////                    ///fin de hijo
////                    jason_solo_arbol += "    ]\n";
////                    
////                    System.out.println("("+ i +") izq: "+ izquierda + ", der: " + derecha  );
////                    
////                    //System.out.println("("+ i +") "+ vector_arbol[i].carne);
////                    //System.out.println("("+ i +") "+ vector_arbol[i].nombre);
////                }  
////            }
////            
////            
//            jason_solo_arbol += "        } \n";
//            
//            jason_tree += jason_solo_arbol;
//            jason_tree += "};";  ///finaliza la creacion
//            
//            JOptionPane.showMessageDialog(this, jason_tree  );
//            graf_arbol(jason_tree);
            
            
        }
    }//GEN-LAST:event_b_cargarActionPerformed

    public void creando_Arbol(){
        jason_tree = "";
        jason_tree += "    var chart_config = { \n";
        jason_tree += "chart: {\n";
        jason_tree += "    container: \"#basic-example\",\n";
        jason_tree += "    connectors:  {\n";
        jason_tree += "        type: 'bCurve'\n";
        jason_tree += "    },\n";
        jason_tree += "    animateOnInit: true,\n";
        jason_tree += "    node: {\n";
        jason_tree += "        collapsable: true,HTMLclass: 'nodeExample1'\n";
        jason_tree += "    },\n";
        jason_tree += "    animation: {\n";
        jason_tree += "        nodeAnimation: \"easeOutBounce\",\n";
        jason_tree += "        nodeSpeed: 700,\n";
        jason_tree += "        connectorsAnimation: \"bounce\",\n";
        jason_tree += "        connectorsSpeed: 700\n";
        jason_tree += "    }\n";
        jason_tree += "},\n";
    }
        
    /*psts importar archivo*/
    public void Read_Csv(String ruta){
        //boolean error_user = false;
        
        vector_arbol = new NodeAlum[100];
        int index = 0;
        
        BufferedReader buff = null;
        String linea = "";
        String separador = ",";
        try {
            buff = new BufferedReader(new FileReader(ruta));
            while ((linea = buff.readLine()) != null) {                
                String[] alumnos = linea.split(separador);
                //Imprime datos.
                if (alumnos[0].equals("carne")){
                }else{
                    //System.out.println(alumnos[0] + " - " + alumnos[1] + " i = " + index);
                    
//                    NodeAlum alumno = new NodeAlum(alumnos[0], alumnos[1]);
//                    vector_arbol[index] = alumno;
//                    index++;
                    
                    
                }
               
            }
        } catch (Exception e1) {
            e1.printStackTrace();
        } finally {
            if (buff != null) {
                try {
                    buff.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
        //print_vector();
    }
    
    public void print_vector(){
        
        for (int i = 0; i < vector_arbol.length ;i++) {
            if (vector_arbol[i] != null){
                System.out.println("("+ i +") "+ vector_arbol[i].carne);
                System.out.println("("+ i +") "+ vector_arbol[i].nombre);
            }  
        }   
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    
    public void graf_arbol(String grafica){
        //File archivo =new File("hash_user.txt");
        try
            {
            File archivo =new File("ejemplo.js");
            FileWriter escribir= new FileWriter(archivo);
            escribir.write(grafica);
            escribir.close();
            Desktop.getDesktop().open(new File("index.html"));
            }

            catch(Exception e)
            {
            JOptionPane.showMessageDialog(null, "Error al escribir","NANI",JOptionPane.ERROR_MESSAGE);
            //return false;
            }
        
//        try {
//
//            Runtime rt = Runtime.getRuntime();
//            //rt.exec( cmd );
//            Process p = rt.exec("dot -Tpng hash_user.txt -o hash_user.jpg");
//            p.waitFor();
//            //rt.exec("hash_user.jpg");
//            //Desktop.getDesktop().open(new File("hash_user.jpg"));
//
//            } catch (Exception ex) {
//                ex.printStackTrace();
//                JOptionPane.showMessageDialog(null, ex,"NANI",JOptionPane.ERROR_MESSAGE);
//                return false;
//            } finally {}
        
//        return true;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_cargar;
    private javax.swing.JButton b_import;
    // End of variables declaration//GEN-END:variables
}
